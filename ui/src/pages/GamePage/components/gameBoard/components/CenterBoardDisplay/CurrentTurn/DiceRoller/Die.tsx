// =============================================================
//This file was generated by ChatGPT, don't ask me what it does
// =============================================================

import { useGameState } from '@stateProviders/GameStateProvider';
import { useEffect, useRef, useState } from 'react';


const numberRotationMap: Record<number, { x: number; y: number }> = {
  1: { x: 0, y: 0 },       // front
  2: { x: -90, y: 0 },     // bottom
  3: { x: 0, y: -90 },     // right
  4: { x: 0, y: 90 },      // left
  5: { x: 90, y: 0 },      // top
  6: { x: 0, y: 180 },     // back
};

export const Die:React.FC<{dieNumber:number}> = ({dieNumber}) => {
  const [rolling, setRolling] = useState(false);
  const diceRef = useRef<HTMLDivElement>(null);
  const animationRef = useRef<number | null>(null);
  const angle = useRef({ x: 0, y: 0 });
  const gameState = useGameState();

  useEffect( () => {
    if(gameState?.game?.diceRollInProgress){
      startRoll()
    }else{
      stopRoll(dieNumber)
    }
  },[gameState?.game?.diceRollInProgress,dieNumber])


  const rollDice = () => {
    angle.current.x += Math.random() * 20 + 5;
    angle.current.y += Math.random() * 20 + 5;
    if (diceRef.current) {
      diceRef.current.style.transform = `rotateX(${angle.current.x}deg) rotateY(${angle.current.y}deg)`;
    }
    animationRef.current = requestAnimationFrame(rollDice);
  };

  const startRoll = () => {
    if (rolling) return;
    setRolling(true);
    animationRef.current = requestAnimationFrame(rollDice);
  };

  const stopRoll = (targetnumber:number) => {
    setRolling(false);
    if (animationRef.current !== null) cancelAnimationFrame(animationRef.current);

    const baseRotation = numberRotationMap[targetnumber];

    const normalizedX = ((angle.current.x % 360) + 360) % 360;
    const normalizedY = ((angle.current.y % 360) + 360) % 360;

    let deltaX = baseRotation.x - normalizedX;
    if (deltaX > 180) deltaX -= 360;
    else if (deltaX < -180) deltaX += 360;

    let deltaY = baseRotation.y - normalizedY;
    if (deltaY > 180) deltaY -= 360;
    else if (deltaY < -180) deltaY += 360;

    angle.current.x = normalizedX + deltaX;
    angle.current.y = normalizedY + deltaY;

    if (diceRef.current) {
      diceRef.current.style.transform = 
        `rotateX(${angle.current.x}deg) rotateY(${angle.current.y}deg)`;
    }
  };

  return (
    <div className="flex flex-col items-center gap-4 mt-10">
      <div className="scene">
        <div className="dice" ref={diceRef}>
          <div className="number front">
            <div className="pip center" />
            </div>
            <div className="number back">
              <div className="pip top-left" />
              <div className="pip top-right" />
              <div className="pip middle-left" />
              <div className="pip middle-right" />
              <div className="pip bottom-left" />
              <div className="pip bottom-right" />
            </div>
            <div className="number right">
            <div className="pip top-left" />
            <div className="pip center" />
            <div className="pip bottom-right" />
            </div>
            <div className="number left">
              <div className="pip top-left" />
              <div className="pip top-right" />
              <div className="pip bottom-left" />
              <div className="pip bottom-right" />
            </div>
            <div className="number top">
            <div className="pip top-left" />
            <div className="pip bottom-right" />
            </div>
            <div className="number bottom">
            <div className="pip top-left" />
            <div className="pip top-right" />
            <div className="pip center" />
            <div className="pip bottom-left" />
            <div className="pip bottom-right" />
            </div>
        </div>
      </div>

      <style>{`
      .pip {
        width: 16px;
        height: 16px;
        background-color: #000;
        border-radius: 50%;
        position: absolute;
        }

        .center         { top: 42px; left: 42px; }
        .top-left       { top: 20px; left: 20px; }
        .top-right      { top: 20px; right: 20px; }
        .bottom-left    { bottom: 20px; left: 20px; }
        .bottom-right   { bottom: 20px; right: 20px; }
        .middle-left  { top: 42px; left: 20px; }
        .middle-right { top: 42px; right: 20px; }
        .scene {
          width: 120px;
          height: 120px;
          perspective: 600px;
        }
        .dice {
          width: 100px;
          height: 100px;
          position: relative;
          transform-style: preserve-3d;
        }
        .number {
          position: absolute;
          width: 100px;
          height: 100px;
          background: #fff;
          border: 2px solid #333;
          font-size: 2rem;
          font-weight: bold;
          display: flex;
          align-items: center;
          justify-content: center;
          user-select: none;
        }
        .front  { transform: rotateY(0deg) translateZ(50px); }
        .back   { transform: rotateY(180deg) rotateZ(180deg) translateZ(50px); }
        .right  { transform: rotateY( 90deg) translateZ(50px); }
        .left   { transform: rotateY(-90deg) translateZ(50px); }
        .top    { transform: rotateX( 90deg) translateZ(50px); }
        .bottom { transform: rotateX(-90deg) translateZ(50px); }
      `}</style>
    </div>
  );
}
